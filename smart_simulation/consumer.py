import logging
import random

import daiquiri

daiquiri.setup(level=logging.INFO)


def decide(probability: float) -> bool:
    """
    Randomly make a binary decision given the probability of decision outcome

    Args:
        probability: That a customer will consume

    Returns:
        Customer's decision
    """
    if probability < 0 or probability > 1:
        logging.exception("Probability is an invalid number. Check configuration.")
        raise ValueError
    return random.random() < probability


def consume(random_function: random.random, function_params: tuple) -> int:
    """
    Consume a quantity of servings based on a number generated by a function of the Random library

    Args:
        random_function: Function for quantity number generation
        function_params: Input parameters for the function

    Returns:
        The quantity of servings consumes
    """
    try:
        quantity = random_function(*function_params)
    except TypeError:
        logging.exception(
            "function_params are invalid inputs for random_function. Check configurations."
        )
        raise
    except Exception:
        raise
    return quantity
